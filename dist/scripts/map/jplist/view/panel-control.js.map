{"version":3,"sources":["map/jplist/view/panel-control.js"],"names":[],"mappings":"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","file":"map/jplist/view/panel-control.js","sourcesContent":["/*global jQuery:false */\n(function($){\n\t'use strict';\t\t\n\n\t/**\n\t* render control html\n\t* @param {Object} self - jplist panel control type 'this' object\n\t*/\n\tvar render = function(self){\n\t\t\n\t\tvar render;\n\t\t\n\t\tif(self.controlTypeClass){\t\n\t\t\t\n\t\t\t//get render method\n\t\t\trender = self.controlTypeClass['render'];\n\t\t\t\n\t\t\tif(render && $.isFunction(render)){\n\t\t\t\t\t\t\t\n\t\t\t\t//render html\n\t\t\t\trender(self);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t* get control deep link\t\n\t* @param {Object} self - jplist panel control type 'this' object\n\t* @return {string} deep link\n\t*/\n\tvar getDeepLink = function(self){\n\t\t\n\t\tvar getDeepLinkFunc\n\t\t\t,deepLink = '';\n\t\t\n\t\tif(self.controlTypeClass){\t\n\t\t\t\n\t\t\t//get getStatusByDeepLink method\n\t\t\tgetDeepLinkFunc = self.controlTypeClass['getDeepLink'];\n\t\t\t\n\t\t\tif(getDeepLinkFunc && $.isFunction(getDeepLinkFunc)){\n\t\t\t\t\t\t\n\t\t\t\t//call function\n\t\t\t\tdeepLink = getDeepLinkFunc(self);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn deepLink;\n\t};\n\t\n\t/**\n\t* set control deep link\t\n\t* @param {Object} self - jplist panel control type 'this' object\n\t* @param {string} propName - deep link property name\n\t* @param {string} propValue - deep link property value\n\t* @return {jQuery.fn.jplist.models.Status}\n\t*/\n\tvar getStatusByDeepLink = function(self, propName, propValue){\n\t\t\n\t\tvar getStatusByDeepLinkFunc\n\t\t\t,status = null;\n\t\t\n\t\tif(self.controlTypeClass){\t\n\t\t\t\n\t\t\t//get getStatusByDeepLink method\n\t\t\tgetStatusByDeepLinkFunc = self.controlTypeClass['getStatusByDeepLink'];\n\t\t\t\n\t\t\tif(getStatusByDeepLinkFunc && $.isFunction(getStatusByDeepLinkFunc)){\n\t\t\t\t\t\t\n\t\t\t\t//get updated status from control's 'getStatusByDeepLink' function\n\t\t\t\tstatus = getStatusByDeepLinkFunc(self, propName, propValue);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn status;\n\t};\n\t\n\t/**\n\t* get all paths\n\t* @param {Object} self - jplist panel conrtol 'this' object\n\t* @return {Array.<jQuery.fn.jplist.models.Path>}\n\t*/\n\tvar getPaths = function(self){\n\t\n\t\tvar paths = []\n\t\t\t,getPaths;\n\t\t\t\n\t\tif(self.controlTypeClass){\n\t\t\t\n\t\t\t//get getPaths method\n\t\t\tgetPaths = self.controlTypeClass['getPaths'];\n\t\t\t\n\t\t\tif(getPaths && $.isFunction(getPaths)){\n\t\t\t\t\t\t\t\n\t\t\t\t//getPaths\n\t\t\t\tgetPaths(self, paths);\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn paths;\n\t};\n\t\n\t/**\n\t* get current status\n\t* @param {Object} self - jplist panel conrtol 'this' object\n\t* @param {boolean} isDefault - if true, get default (initial) control status; else - get current control status\n\t* @return {jQuery.fn.jplist.models.Status}\n\t*/\n\tvar getStatus = function(self, isDefault){\n\t\n\t\tvar status = null\n\t\t\t,getStatus;\n\t\t\n\t\tif(self.controlTypeClass){\n\t\t\t\n\t\t\t//get getStatus method\n\t\t\tgetStatus = self.controlTypeClass['getStatus'];\n\t\t\t\n\t\t\tif(getStatus && $.isFunction(getStatus)){\n\t\t\t\t\t\t\t\n\t\t\t\t//getStatus\n\t\t\t\tstatus = getStatus(isDefault, self);\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn status;\n\t};\n\t\n\t/**\n\t* set status to control\n\t* @param {jQuery.fn.jplist.models.Status} status\n\t* @param {boolean} isCookie - is status restored from cookies\n\t*/\n\tvar setStatus = function(self, status, isCookie){\n\t\n\t\tvar setStatus;\n\t\t\n\t\tif(status.action === self.action && status.name === self.name){//status.type == self.type \n\t\t  \n\t\t   if(self.controlTypeClass){\n\t\t\t\t\n\t\t\t\t//get setStatus method\n\t\t\t\tsetStatus = self.controlTypeClass['setStatus'];\n\t\t\t\t\n\t\t\t\tif(setStatus && $.isFunction(setStatus)){\n\t\t\t\t\t\t\n\t\t\t\t\t//setStatus\n\t\t\t\t\tsetStatus(status, self, isCookie);\n\t\t\t\t}\n\t\t\t}\n\t\t }\n\t};\n\t\n\t/**\n\t* init events\n\t* @param {Object} self - jplist panel control type 'this' object\n\t*/\n\tvar initEvents = function(self){\n\t\n\t\tvar initEvents;\n\t\t\n\t\tif(self.controlTypeClass){\n\t\t\t\n\t\t\t//get initEvents method\n\t\t\tinitEvents = self.controlTypeClass['initEvents'];\n\t\t\t\n\t\t\tif(initEvents && $.isFunction(initEvents)){\n\t\t\t\t\t\t\t\n\t\t\t\t//initEvents\n\t\t\t\tinitEvents(self);\n\t\t\t}\n\t\t}\t \n\t};\n\t\n\t/**\n\t* Panel control constructor\t\n\t* @param {jQueryObject} $jplistBox - jplist jquery element\n\t* @param {Object} options - jplist options\n\t* @param {jQueryObject} $control - jquery object\n\t* @param {jQuery.fn.jplist.controller.Events} events\n\t* @return {Object} - panel control control + this\n\t* @constructor \n\t*/\n\tvar Init = function($jplistBox, options, $control, events){\n\t\t\n\t\tvar self = {\t\t\t\n\t\t\t$jplistBox: $jplistBox\n\t\t\t,options: options\t\t\t\n\t\t\t,$control: $control\n\t\t\t,events: events\n\t\t\t\n\t\t\t,type: null\n\t\t\t,action: null\n\t\t\t,name: null\n            ,category: null\n\t\t\t,cookies: true //by default control is stored in cookies (if cookies are enabled)\n\t\t\t\n\t\t\t,controlType: null\n\t\t\t,controlTypeClass: null\n\t\t\t,controlTypeOptions: null\n\t\t}\n\t\t,temp;\n\t\t\n\t\t//set controls properties\n\t\tself.type = $control.attr('data-control-type');\n\t\tself.action = $control.attr('data-control-action');\n\t\tself.name = $control.attr('data-control-name');\n        self.category = $control.attr('data-control-category');\n\t\t\n\t\t//by default control is stored in cookies (if cookies are enabled)\n\t\t//if data-control-cookies=\"false\" - control is excluded from cookies\n\t\ttemp = $control.attr('data-control-cookies');\n\t\tif(temp && temp.toString() === 'false'){\n\t\t\tself.cookies = false;\n\t\t}\n\t\t\n\t\t//init control vars\n\t\tself.controlType = self.options.control_types[self.type];\n\t\t\n\t\tif(self.controlType){\n\t\t\n\t\t\t//get control type class\n\t\t\tif(self.controlType['class_name']){\n\t\t\t\tself.controlTypeClass = jQuery.fn.jplist.controls[self.controlType['class_name']];\n\t\t\t}\n\t\t\t\n\t\t\t//get options\n\t\t\tif(self.controlType['options']){\n\t\t\t\tself.controlTypeOptions = self.controlType['options'];\n\t\t\t}\n\t\t}\n\t\t\n\t\t//render control html\n\t\trender(self);\n\t\t\n\t\treturn $.extend(this, self);\n\t};\n\t\n\t/**\n\t* API: render control html\t\n\t* @memberOf jQuery.fn.jplist.view.PanelControl#\n\t* @public\t\n\t* @name render\n\t* @function\n\t*/\n\tInit.prototype.render = function(){\n\t\trender(this);\n\t};\n\t\n\t/**\n\t* API: set control status by deep link\n\t* @param {string} propName - deep link property name\n\t* @param {string} propValue - deep link property value\n\t* @return {jQuery.fn.jplist.models.Status}\n\t* @memberOf jQuery.fn.jplist.view.PanelControl#\n\t* @public\t\n\t* @name getStatusByDeepLink\n\t* @function\n\t*/\n\tInit.prototype.getStatusByDeepLink = function(propName, propValue){\n\t\treturn getStatusByDeepLink(this, propName, propValue);\n\t};\n\t\n\t/**\n\t* API: get deep link from control\n\t* @return {string} deep link\n\t* @memberOf jQuery.fn.jplist.view.PanelControl#\n\t* @public\t\n\t* @name getDeepLink\n\t* @function\n\t*/\n\tInit.prototype.getDeepLink = function(){\n\t\treturn getDeepLink(this);\n\t};\n\t\n\t/**\n\t* API: get all paths\n\t* @return {Array.<jQuery.fn.jplist.models.Path>}\n\t* @memberOf jQuery.fn.jplist.view.PanelControl#\n\t* @public\t\n\t* @name getPaths\n\t* @function\n\t*/\n\tInit.prototype.getPaths = function(){\n\t\treturn getPaths(this);\n\t};\n\t\n\t/**\n\t* API: get current status\n\t* @param {boolean} isDefault - if true, get default (initial) control status; else - get current control status\n\t* @return {jQuery.fn.jplist.models.Status}\t\n\t* @memberOf jQuery.fn.jplist.view.PanelControl#\n\t* @public\t\n\t* @name getStatus\n\t* @function\n\t*/\n\tInit.prototype.getStatus = function(isDefault){\n\t\treturn getStatus(this, isDefault);\n\t};\n\t\n\t/**\n\t* API: set status to control\n\t* @param {jQuery.fn.jplist.models.Status} status\n\t* @param {boolean} isCookie - is status restored from cookies\n\t* @memberOf jQuery.fn.jplist.view.PanelControl#\n\t* @public\t\n\t* @name setStatus\n\t* @function\n\t*/\n\tInit.prototype.setStatus = function(status, isCookie){\n\t\tsetStatus(this, status, isCookie);\n\t};\n\t\n\t/**\n\t* API: init controls events\t\n\t* @memberOf jQuery.fn.jplist.view.PanelControl#\n\t* @public\t\n\t* @name initEvents\n\t* @function\n\t*/\n\tInit.prototype.initEvents = function(){\n\t\tinitEvents(this);\n\t};\n\t\n\t/**\n\t* panel control \n\t* @param {jQueryObject} $jplistBox - jplist jquery element\n\t* @param {Object} options - jplist options\n\t* @param {jQueryObject} $control\t\n\t* @param {jQuery.fn.jplist.controller.Events} events\n\t* @constructor \n\t* @memberOf jQuery.fn.jplist.view.PanelControl\n\t*\n    * @class Panel control - representation of any control on the panel\n    * @memberOf jQuery.fn.jplist.view\n\t*\n\t* @property {Object} options - user options\t\n\t* @property {jQueryObject} $jplistBox - jplist root element\n\t* @property {jQueryObject} $control - control jquery element\n\t* @property {jQuery.fn.jplist.controller.Events} events\n\t*\n\t* @property {string} name - control name\n\t* @property {string} type - control type\n\t* @property {string} action - control action\n    * @property {string} category - control category\n\t* @property {string} cookies - control cookies\n\t*\n\t* @property {string} controlType - control type object\n\t* @property {string} controlTypeClass - control class\n\t* @property {string} controlTypeOptions - control options\n\t*/\n\tjQuery.fn.jplist.view.PanelControl = function($jplistBox, options, $control, events){\n\n\t\tvar self;\n\t\t\n\t\t//init constructor\n\t\tself = new Init($jplistBox, options, $control, events);\n\t\t\n\t\t//init events\n\t\tinitEvents(self);\n\t\t\n\t\t//properties\n\t\tthis.options = self['options'];\n\t\tthis.$jplistBox = self['$jplistBox'];\n\t\tthis.$control = self['$control'];\n\t\tthis.events = self['events'];\n\t\t\n\t\t//control properties\n\t\tthis.type = self['type'];\n\t\tthis.action = self['action'];\n\t\tthis.name = self['name'];\n        this.category = self['category'];\n\t\tthis.cookies = self['cookies'];\n\t\t\n\t\t//control additional properties\n\t\tthis.controlType = self['controlType'];\n\t\tthis.controlTypeClass = self['controlTypeClass'];\n\t\tthis.controlTypeOptions = self['controlTypeOptions'];\n\t\t\n\t\t//methods\n\t\tthis.render = self['render'];\n\t\tthis.getPaths = self['getPaths'];\n\t\tthis.getStatus = self['getStatus'];\n\t\tthis.setStatus = self['setStatus'];\n\t\tthis.initEvents = self['initEvents'];\n\t\tthis.getStatusByDeepLink = self['getStatusByDeepLink'];\n\t\tthis.getDeepLink = self['getDeepLink'];\n\t};\n\t\n})(jQuery);\n\n"],"sourceRoot":"/source/"}