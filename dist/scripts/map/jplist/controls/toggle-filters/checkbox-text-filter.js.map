{"version":3,"sources":["map/jplist/controls/toggle-filters/checkbox-text-filter.js"],"names":[],"mappings":"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","file":"map/jplist/controls/toggle-filters/checkbox-text-filter.js","sourcesContent":["(function(jQuery){\r\n\t'use strict';\r\n\r\n    /**\r\n\t* Checkbox text filter control\r\n\t* @type {Object}\r\n    * @class CheckboxTextFilter - checkbox text filter control\r\n    * @memberOf jQuery.fn.jplist\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter = {};\r\n\r\n    /**\r\n\t* Status object related data - used to define and perform filter action\r\n\t* @param {Array.<string>} textGroup - list of text values\r\n    * @param {string} logic - 'or' / 'and'\r\n    * @param {string} path - data-path attribute of the control\r\n    * @param {string} ignoreRegex\r\n\t* @constructor\r\n\t* @function\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.statusRelatedData = function(textGroup, logic, path, ignoreRegex){\r\n\r\n\t\treturn {\r\n\t\t\ttextGroup: textGroup\r\n            ,logic: logic\r\n            ,path: path\r\n            ,ignoreRegex: ignoreRegex\r\n\t\t\t,filterType: 'textGroup'\r\n\t\t};\r\n\t};\r\n\r\n    /**\r\n\t* render CheckboxTextFilter control html\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.render = function(control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,$checkboxes = $control.find('input[type=\"checkbox\"]');\r\n\r\n\t\t//in every checkbox: save if it's checked in it's data\r\n\t\t$checkboxes.each(function(){\r\n\t\t\tvar $cb = $(this);\r\n\t\t\t$cb.data('checked', $cb.get(0).checked);\r\n\t\t});\r\n\r\n\t\t//save vars to the 'data'\r\n\t\t$control.data('checkboxes', $checkboxes);\r\n\t};\r\n\r\n    /**\r\n\t* Get deep link\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @return {string} deep link\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getDeepLink = function(control){\r\n\r\n\t\tvar deepLink = ''\r\n\t\t\t,status\r\n\t\t\t,isDefault = false\r\n\t\t\t,value = '';\r\n\r\n\t\t//get status\r\n\t\tstatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(isDefault, control);\r\n\r\n\t\tif(status.data && $['isArray'](status.data.textGroup) && status.data.textGroup.length > 0){\r\n\r\n\t\t\tfor(var i=0; i<status.data.textGroup.length; i++){\r\n\r\n\t\t\t\tif(value !== ''){\r\n\t\t\t\t\tvalue += '~';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvalue += status.data.textGroup[i];\r\n\t\t\t}\r\n\r\n\t\t\t//init deep link\r\n\t\t\tdeepLink = control.name + '--textGroup=' + value;\r\n\t\t}\r\n\r\n\t\treturn deepLink;\r\n\t};\r\n\r\n    /**\r\n\t* Set deep link\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {string} propName - deep link property name\r\n\t* @param {string} propValue - deep link property value\r\n\t* @return {jQuery.fn.jplist.models.Status}\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getStatusByDeepLink = function(control, propName, propValue){\r\n\r\n\t\tvar isDefault = true\r\n\t\t\t,status = null\r\n\t\t\t,sections;\r\n\r\n\t\t//get status\r\n\t\tstatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(isDefault, control);\r\n\r\n\t\tif(status.data){\r\n\r\n\t\t\tif(propName === 'textGroup'){\r\n\r\n\t\t\t\tsections = propValue.split('~');\r\n\r\n\t\t\t\tif(sections.length > 0){\r\n\r\n\t\t\t\t\tstatus.data.textGroup = sections;\r\n\r\n\t\t\t\t\t//trigger status event\r\n\t\t\t\t\t//control.$jplistBox.trigger(control.options.status_event, [status]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn status;\r\n\t};\r\n\r\n    /**\r\n\t* Get control paths\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {Array.<jQuery.fn.jplist.models.Path>} paths\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getPaths = function(control, paths){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,dataPath\r\n\t\t\t,path;\r\n\r\n        //get data-path\r\n\t    dataPath = $control.attr('data-path');\r\n\r\n        if(dataPath){\r\n\r\n            //create path object\r\n\t\t\tpath = new jQuery.fn.jplist.models.Path(dataPath, 'text');\r\n\r\n            //add path to the paths list\r\n            if(!jQuery.fn.jplist.services.Path.isPathInList(path, paths)){\r\n                paths.push(path);\r\n            }\r\n        }\r\n\t};\r\n\r\n    /**\r\n\t* Get control status\r\n\t* @param {boolean} isDefault - if true, get default (initial) control status; else - get current control status\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @return {jQuery.fn.jplist.models.Status}\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getStatus = function(isDefault, control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,$checkboxes = $control.data('checkboxes')\r\n\t\t\t,data\r\n            ,textGroup = []\r\n            ,cbVal\r\n\t\t\t,$cb\r\n\t\t\t,cbData\r\n\t\t\t,status\r\n            ,dataPath\r\n            ,dataLogic\r\n            ,ignore = ''\r\n            ,i;\r\n\r\n\t\tif(isDefault){\r\n\r\n\t\t\t//init path group\r\n\t\t\tfor(i=0; i<$checkboxes.length; i++){\r\n\r\n\t\t\t\t//get checkbox\r\n\t\t\t\t$cb = $checkboxes.eq(i);\r\n\r\n\t\t\t\t//get checkbox data\r\n\t\t\t\tcbData = $cb.data('checked');\r\n\r\n\t\t\t\tif(!!cbData){\r\n\r\n\t\t\t\t\t//get checkbox value\r\n\t\t\t\t    cbVal = $cb.val();\r\n\r\n\t\t\t\t\tif(cbVal){\r\n\t\t\t\t\t\ttextGroup.push(cbVal);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\r\n\t\t\t//init text group: get all selected checkbox values\r\n\t\t\tfor(i=0; i<$checkboxes.length; i++){\r\n\r\n\t\t\t\t//get checkbox\r\n\t\t\t\t$cb = $checkboxes.eq(i);\r\n\r\n\t\t\t\t//get checkbox value\r\n\t\t\t\tcbVal = $cb.val();\r\n\r\n\t\t\t\tif(cbVal && $cb.get(0).checked){\r\n\t\t\t\t\ttextGroup.push(cbVal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        //get data-path attribute\r\n        dataPath = $control.attr('data-path');\r\n\r\n        //get data-logic\r\n        dataLogic = $control.attr('data-logic');\r\n        if(!dataLogic){\r\n            dataLogic = 'or';\r\n        }\r\n\r\n        if(control.controlTypeOptions && control.controlTypeOptions.ignore){\r\n\r\n\t\t\t//get ignore characters\r\n\t\t\tignore = control.controlTypeOptions.ignore;\r\n\t\t}\r\n\r\n\t\t//init status related data\r\n\t\tdata = new jQuery.fn.jplist.controls.CheckboxTextFilter.statusRelatedData(textGroup, dataLogic, dataPath, ignore);\r\n\r\n\t\t//init status\r\n\t\tstatus = new jQuery.fn.jplist.models.Status(control.name, control.action, control.type, data, control.cookies, control.category);\r\n\r\n\t\treturn status;\r\n\t};\r\n\r\n    /**\r\n\t* Set control status\r\n\t* @param {jQuery.fn.jplist.models.Status} status\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {boolean} isCookie - is status restored from cookies\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.setStatus = function(status, control, isCookie){\r\n\r\n\t\tvar cbVal\r\n\t\t\t,$control = control.$control\r\n\t\t\t,$cb\r\n\t\t\t,$checkboxes = $control.data('checkboxes');\r\n\r\n\t\tif($checkboxes){\r\n\r\n\t\t\t//reset\tall checkboxes\r\n\t\t\t$checkboxes.each(function(){\r\n\t\t\t\t$(this).get(0).checked = false;\r\n\t\t\t});\r\n\r\n\t\t\tif(status.data && status.data.textGroup && $['isArray'](status.data.textGroup) && status.data.textGroup.length > 0){\r\n\r\n\t\t\t\tfor(var i=0; i<status.data.textGroup.length; i++){\r\n\r\n\t\t\t\t\t//get path\r\n\t\t\t\t\tcbVal = status.data.textGroup[i];\r\n\r\n\t\t\t\t\t$cb = $checkboxes.filter('[value=\"' + cbVal + '\"]');\r\n\r\n\t\t\t\t\tif($cb.length > 0){\r\n\t\t\t\t\t\t$cb.get(0).checked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Init control events\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.initEvents = function(control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,checkboxes = $control.data('checkboxes');\r\n\r\n\t\tcheckboxes.off('change').change(function(){\r\n\t\t\tcontrol.events.lastStatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(false, control);\r\n\t\t\tcontrol.$jplistBox.trigger(control.options.force_ask_event, [false]);\r\n\t\t});\r\n\t};\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}