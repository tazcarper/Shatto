{"version":3,"sources":["map/jplist/controls/toggle-filters/checkbox-text-filter.js"],"names":[],"mappings":"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","file":"map/jplist/controls/toggle-filters/checkbox-text-filter.js","sourcesContent":["(function(jQuery){\r\n\t'use strict';\r\n\r\n    /**\r\n\t* Checkbox text filter control\r\n\t* @type {Object}\r\n    * @class CheckboxTextFilter - checkbox text filter control\r\n    * @memberOf jQuery.fn.jplist\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter = {};\r\n\r\n    /**\r\n\t* Status object related data - used to define and perform filter action\r\n\t* @param {Array.<string>} textGroup - list of text values\r\n    * @param {string} logic - 'or' / 'and'\r\n    * @param {string} path - data-path attribute of the control\r\n    * @param {string} ignoreRegex\r\n\t* @constructor\r\n\t* @function\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.statusRelatedData = function(textGroup, logic, path, ignoreRegex){\r\n\r\n\t\treturn {\r\n\t\t\ttextGroup: textGroup\r\n            ,logic: logic\r\n            ,path: path\r\n            ,ignoreRegex: ignoreRegex\r\n\t\t\t,filterType: 'textGroup'\r\n\t\t};\r\n\t};\r\n\r\n    /**\r\n\t* render CheckboxTextFilter control html\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.render = function(control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,$checkboxes = $control.find('input[type=\"checkbox\"]');\r\n\r\n\t\t//in every checkbox: save if it's checked in it's data\r\n\t\t$checkboxes.each(function(){\r\n\t\t\tvar $cb = $(this);\r\n\t\t\t$cb.data('checked', $cb.get(0).checked);\r\n\t\t});\r\n\r\n\t\t//save vars to the 'data'\r\n\t\t$control.data('checkboxes', $checkboxes);\r\n\t};\r\n\r\n    /**\r\n\t* Get deep link\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @return {string} deep link\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getDeepLink = function(control){\r\n\r\n\t\tvar deepLink = ''\r\n\t\t\t,status\r\n\t\t\t,isDefault = false\r\n\t\t\t,value = '';\r\n\r\n\t\t//get status\r\n\t\tstatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(isDefault, control);\r\n\r\n\t\tif(status.data && $['isArray'](status.data.textGroup) && status.data.textGroup.length > 0){\r\n\r\n\t\t\tfor(var i=0; i<status.data.textGroup.length; i++){\r\n\r\n\t\t\t\tif(value !== ''){\r\n\t\t\t\t\tvalue += '~';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvalue += status.data.textGroup[i];\r\n\t\t\t}\r\n\r\n\t\t\t//init deep link\r\n\t\t\tdeepLink = control.name + '--textGroup=' + value;\r\n\t\t}\r\n\r\n\t\treturn deepLink;\r\n\t};\r\n\r\n    /**\r\n\t* Set deep link\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {string} propName - deep link property name\r\n\t* @param {string} propValue - deep link property value\r\n\t* @return {jQuery.fn.jplist.models.Status}\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getStatusByDeepLink = function(control, propName, propValue){\r\n\r\n\t\tvar isDefault = true\r\n\t\t\t,status = null\r\n\t\t\t,sections;\r\n\r\n\t\t//get status\r\n\t\tstatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(isDefault, control);\r\n\r\n\t\tif(status.data){\r\n\r\n\t\t\tif(propName === 'textGroup'){\r\n\r\n\t\t\t\tsections = propValue.split('~');\r\n\r\n\t\t\t\tif(sections.length > 0){\r\n\r\n\t\t\t\t\tstatus.data.textGroup = sections;\r\n\r\n\t\t\t\t\t//trigger status event\r\n\t\t\t\t\t//control.$jplistBox.trigger(control.options.status_event, [status]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn status;\r\n\t};\r\n\r\n    /**\r\n\t* Get control paths\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {Array.<jQuery.fn.jplist.models.Path>} paths\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getPaths = function(control, paths){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,dataPath\r\n\t\t\t,path;\r\n\r\n        //get data-path\r\n\t    dataPath = $control.attr('data-path');\r\n\r\n        if(dataPath){\r\n\r\n            //create path object\r\n\t\t\tpath = new jQuery.fn.jplist.models.Path(dataPath, 'text');\r\n\r\n            //add path to the paths list\r\n            if(!jQuery.fn.jplist.services.Path.isPathInList(path, paths)){\r\n                paths.push(path);\r\n            }\r\n        }\r\n\t};\r\n\r\n    /**\r\n\t* Get control status\r\n\t* @param {boolean} isDefault - if true, get default (initial) control status; else - get current control status\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @return {jQuery.fn.jplist.models.Status}\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getStatus = function(isDefault, control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,$checkboxes = $control.data('checkboxes')\r\n\t\t\t,data\r\n            ,textGroup = []\r\n            ,cbVal\r\n\t\t\t,$cb\r\n\t\t\t,cbData\r\n\t\t\t,status\r\n            ,dataPath\r\n            ,dataLogic\r\n            ,ignore = ''\r\n            ,i;\r\n\r\n\t\tif(isDefault){\r\n\r\n\t\t\t//init path group\r\n\t\t\tfor(i=0; i<$checkboxes.length; i++){\r\n\r\n\t\t\t\t//get checkbox\r\n\t\t\t\t$cb = $checkboxes.eq(i);\r\n\r\n\t\t\t\t//get checkbox data\r\n\t\t\t\tcbData = $cb.data('checked');\r\n\r\n\t\t\t\tif(!!cbData){\r\n\r\n\t\t\t\t\t//get checkbox value\r\n\t\t\t\t    cbVal = $cb.val();\r\n\r\n\t\t\t\t\tif(cbVal){\r\n\t\t\t\t\t\ttextGroup.push(cbVal);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\r\n\t\t\t//init text group: get all selected checkbox values\r\n\t\t\tfor(i=0; i<$checkboxes.length; i++){\r\n\r\n\t\t\t\t//get checkbox\r\n\t\t\t\t$cb = $checkboxes.eq(i);\r\n\r\n\t\t\t\t//get checkbox value\r\n\t\t\t\tcbVal = $cb.val();\r\n\r\n\t\t\t\tif(cbVal && $cb.get(0).checked){\r\n\t\t\t\t\ttextGroup.push(cbVal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        //get data-path attribute\r\n        dataPath = $control.attr('data-path');\r\n\r\n        //get data-logic\r\n        dataLogic = $control.attr('data-logic');\r\n        if(!dataLogic){\r\n            dataLogic = 'or';\r\n        }\r\n\r\n        if(control.controlTypeOptions && control.controlTypeOptions.ignore){\r\n\r\n\t\t\t//get ignore characters\r\n\t\t\tignore = control.controlTypeOptions.ignore;\r\n\t\t}\r\n\r\n\t\t//init status related data\r\n\t\tdata = new jQuery.fn.jplist.controls.CheckboxTextFilter.statusRelatedData(textGroup, dataLogic, dataPath, ignore);\r\n\r\n\t\t//init status\r\n\t\tstatus = new jQuery.fn.jplist.models.Status(control.name, control.action, control.type, data, control.cookies, control.category);\r\n\r\n\t\treturn status;\r\n\t};\r\n\r\n    /**\r\n\t* Set control status\r\n\t* @param {jQuery.fn.jplist.models.Status} status\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {boolean} isCookie - is status restored from cookies\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.setStatus = function(status, control, isCookie){\r\n\r\n\t\tvar cbVal\r\n\t\t\t,$control = control.$control\r\n\t\t\t,$cb\r\n\t\t\t,$checkboxes = $control.data('checkboxes');\r\n\r\n\t\tif($checkboxes){\r\n\r\n\t\t\t//reset\tall checkboxes\r\n\t\t\t$checkboxes.each(function(){\r\n\t\t\t\t$(this).get(0).checked = false;\r\n\t\t\t});\r\n\r\n\t\t\tif(status.data && status.data.textGroup && $['isArray'](status.data.textGroup) && status.data.textGroup.length > 0){\r\n\r\n\t\t\t\tfor(var i=0; i<status.data.textGroup.length; i++){\r\n\r\n\t\t\t\t\t//get path\r\n\t\t\t\t\tcbVal = status.data.textGroup[i];\r\n\r\n\t\t\t\t\t$cb = $checkboxes.filter('[value=\"' + cbVal + '\"]');\r\n\r\n\t\t\t\t\tif($cb.length > 0){\r\n\t\t\t\t\t\t$cb.get(0).checked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Init control events\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.initEvents = function(control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,checkboxes = $control.data('checkboxes');\r\n\r\n\t\tcheckboxes.off('change').change(function(){\r\n\t\t\tcontrol.events.lastStatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(false, control);\r\n\t\t\tcontrol.$jplistBox.trigger(control.options.force_ask_event, [false]);\r\n\t\t});\r\n\t};\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}