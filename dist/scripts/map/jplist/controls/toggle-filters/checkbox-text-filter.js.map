{"version":3,"sources":["map/jplist/controls/toggle-filters/checkbox-text-filter.js"],"names":[],"mappings":"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","file":"map/jplist/controls/toggle-filters/checkbox-text-filter.js","sourcesContent":["(function(jQuery){\r\n\t'use strict';\r\n\r\n    /**\r\n\t* Checkbox text filter control\r\n\t* @type {Object}\r\n    * @class CheckboxTextFilter - checkbox text filter control\r\n    * @memberOf jQuery.fn.jplist\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter = {};\r\n\r\n    /**\r\n\t* Status object related data - used to define and perform filter action\r\n\t* @param {Array.<string>} textGroup - list of text values\r\n    * @param {string} logic - 'or' / 'and'\r\n    * @param {string} path - data-path attribute of the control\r\n    * @param {string} ignoreRegex\r\n\t* @constructor\r\n\t* @function\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.statusRelatedData = function(textGroup, logic, path, ignoreRegex){\r\n\r\n\t\treturn {\r\n\t\t\ttextGroup: textGroup\r\n            ,logic: logic\r\n            ,path: path\r\n            ,ignoreRegex: ignoreRegex\r\n\t\t\t,filterType: 'textGroup'\r\n\t\t};\r\n\t};\r\n\r\n    /**\r\n\t* render CheckboxTextFilter control html\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.render = function(control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,$checkboxes = $control.find('input[type=\"checkbox\"]');\r\n\r\n\t\t//in every checkbox: save if it's checked in it's data\r\n\t\t$checkboxes.each(function(){\r\n\t\t\tvar $cb = $(this);\r\n\t\t\t$cb.data('checked', $cb.get(0).checked);\r\n\t\t});\r\n\r\n\t\t//save vars to the 'data'\r\n\t\t$control.data('checkboxes', $checkboxes);\r\n\t};\r\n\r\n    /**\r\n\t* Get deep link\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @return {string} deep link\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getDeepLink = function(control){\r\n\r\n\t\tvar deepLink = ''\r\n\t\t\t,status\r\n\t\t\t,isDefault = false\r\n\t\t\t,value = '';\r\n\r\n\t\t//get status\r\n\t\tstatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(isDefault, control);\r\n\r\n\t\tif(status.data && $['isArray'](status.data.textGroup) && status.data.textGroup.length > 0){\r\n\r\n\t\t\tfor(var i=0; i<status.data.textGroup.length; i++){\r\n\r\n\t\t\t\tif(value !== ''){\r\n\t\t\t\t\tvalue += '~';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvalue += status.data.textGroup[i];\r\n\t\t\t}\r\n\r\n\t\t\t//init deep link\r\n\t\t\tdeepLink = control.name + '--textGroup=' + value;\r\n\t\t}\r\n\r\n\t\treturn deepLink;\r\n\t};\r\n\r\n    /**\r\n\t* Set deep link\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {string} propName - deep link property name\r\n\t* @param {string} propValue - deep link property value\r\n\t* @return {jQuery.fn.jplist.models.Status}\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getStatusByDeepLink = function(control, propName, propValue){\r\n\r\n\t\tvar isDefault = true\r\n\t\t\t,status = null\r\n\t\t\t,sections;\r\n\r\n\t\t//get status\r\n\t\tstatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(isDefault, control);\r\n\r\n\t\tif(status.data){\r\n\r\n\t\t\tif(propName === 'textGroup'){\r\n\r\n\t\t\t\tsections = propValue.split('~');\r\n\r\n\t\t\t\tif(sections.length > 0){\r\n\r\n\t\t\t\t\tstatus.data.textGroup = sections;\r\n\r\n\t\t\t\t\t//trigger status event\r\n\t\t\t\t\t//control.$jplistBox.trigger(control.options.status_event, [status]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn status;\r\n\t};\r\n\r\n    /**\r\n\t* Get control paths\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {Array.<jQuery.fn.jplist.models.Path>} paths\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getPaths = function(control, paths){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,dataPath\r\n\t\t\t,path;\r\n\r\n        //get data-path\r\n\t    dataPath = $control.attr('data-path');\r\n\r\n        if(dataPath){\r\n\r\n            //create path object\r\n\t\t\tpath = new jQuery.fn.jplist.models.Path(dataPath, 'text');\r\n\r\n            //add path to the paths list\r\n            if(!jQuery.fn.jplist.services.Path.isPathInList(path, paths)){\r\n                paths.push(path);\r\n            }\r\n        }\r\n\t};\r\n\r\n    /**\r\n\t* Get control status\r\n\t* @param {boolean} isDefault - if true, get default (initial) control status; else - get current control status\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @return {jQuery.fn.jplist.models.Status}\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.getStatus = function(isDefault, control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,$checkboxes = $control.data('checkboxes')\r\n\t\t\t,data\r\n            ,textGroup = []\r\n            ,cbVal\r\n\t\t\t,$cb\r\n\t\t\t,cbData\r\n\t\t\t,status\r\n            ,dataPath\r\n            ,dataLogic\r\n            ,ignore = ''\r\n            ,i;\r\n\r\n\t\tif(isDefault){\r\n\r\n\t\t\t//init path group\r\n\t\t\tfor(i=0; i<$checkboxes.length; i++){\r\n\r\n\t\t\t\t//get checkbox\r\n\t\t\t\t$cb = $checkboxes.eq(i);\r\n\r\n\t\t\t\t//get checkbox data\r\n\t\t\t\tcbData = $cb.data('checked');\r\n\r\n\t\t\t\tif(!!cbData){\r\n\r\n\t\t\t\t\t//get checkbox value\r\n\t\t\t\t    cbVal = $cb.val();\r\n\r\n\t\t\t\t\tif(cbVal){\r\n\t\t\t\t\t\ttextGroup.push(cbVal);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\r\n\t\t\t//init text group: get all selected checkbox values\r\n\t\t\tfor(i=0; i<$checkboxes.length; i++){\r\n\r\n\t\t\t\t//get checkbox\r\n\t\t\t\t$cb = $checkboxes.eq(i);\r\n\r\n\t\t\t\t//get checkbox value\r\n\t\t\t\tcbVal = $cb.val();\r\n\r\n\t\t\t\tif(cbVal && $cb.get(0).checked){\r\n\t\t\t\t\ttextGroup.push(cbVal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        //get data-path attribute\r\n        dataPath = $control.attr('data-path');\r\n\r\n        //get data-logic\r\n        dataLogic = $control.attr('data-logic');\r\n        if(!dataLogic){\r\n            dataLogic = 'or';\r\n        }\r\n\r\n        if(control.controlTypeOptions && control.controlTypeOptions.ignore){\r\n\r\n\t\t\t//get ignore characters\r\n\t\t\tignore = control.controlTypeOptions.ignore;\r\n\t\t}\r\n\r\n\t\t//init status related data\r\n\t\tdata = new jQuery.fn.jplist.controls.CheckboxTextFilter.statusRelatedData(textGroup, dataLogic, dataPath, ignore);\r\n\r\n\t\t//init status\r\n\t\tstatus = new jQuery.fn.jplist.models.Status(control.name, control.action, control.type, data, control.cookies, control.category);\r\n\r\n\t\treturn status;\r\n\t};\r\n\r\n    /**\r\n\t* Set control status\r\n\t* @param {jQuery.fn.jplist.models.Status} status\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @param {boolean} isCookie - is status restored from cookies\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.setStatus = function(status, control, isCookie){\r\n\r\n\t\tvar cbVal\r\n\t\t\t,$control = control.$control\r\n\t\t\t,$cb\r\n\t\t\t,$checkboxes = $control.data('checkboxes');\r\n\r\n\t\tif($checkboxes){\r\n\r\n\t\t\t//reset\tall checkboxes\r\n\t\t\t$checkboxes.each(function(){\r\n\t\t\t\t$(this).get(0).checked = false;\r\n\t\t\t});\r\n\r\n\t\t\tif(status.data && status.data.textGroup && $['isArray'](status.data.textGroup) && status.data.textGroup.length > 0){\r\n\r\n\t\t\t\tfor(var i=0; i<status.data.textGroup.length; i++){\r\n\r\n\t\t\t\t\t//get path\r\n\t\t\t\t\tcbVal = status.data.textGroup[i];\r\n\r\n\t\t\t\t\t$cb = $checkboxes.filter('[value=\"' + cbVal + '\"]');\r\n\r\n\t\t\t\t\tif($cb.length > 0){\r\n\t\t\t\t\t\t$cb.get(0).checked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Init control events\r\n\t* @param {jQuery.fn.jplist.view.PanelControl} control\r\n\t* @memberOf jQuery.fn.jplist.controls.CheckboxTextFilter\r\n\t*/\r\n\tjQuery.fn.jplist.controls.CheckboxTextFilter.initEvents = function(control){\r\n\r\n\t\tvar $control = control.$control\r\n\t\t\t,checkboxes = $control.data('checkboxes');\r\n\r\n\t\tcheckboxes.off('change').change(function(){\r\n\t\t\tcontrol.events.lastStatus = jQuery.fn.jplist.controls.CheckboxTextFilter.getStatus(false, control);\r\n\t\t\tcontrol.$jplistBox.trigger(control.options.force_ask_event, [false]);\r\n\t\t});\r\n\t};\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}