{"version":3,"sources":["map/jplist/services/path.js"],"names":[],"mappings":";;;AACA,CAAC,UAAS,CAAT,EAAW;AACX;;;;;;;;AADW;AASX,QAAO,EAAP,CAAU,MAAV,CAAiB,QAAjB,CAA0B,IAA1B,GAAiC,EAAjC;;;;;;;;;;;;;;;;;;;;AATW,OA6BX,CAAO,EAAP,CAAU,MAAV,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,YAA/B,GAA8C,UAAS,IAAT,EAAe,SAAf,EAAyB;;AAEtE,MAAI,KAAJ;MACE,WAAW,KAAX;MACA,YAAY,IAAZ,CAJoE;;AAMtE,OAAI,IAAI,IAAE,CAAF,EAAK,IAAE,UAAU,MAAV,EAAkB,GAAjC,EAAqC;;;AAGpC,WAAQ,UAAU,CAAV,CAAR,CAHoC;;AAKpC,OAAG,OAAO,EAAP,CAAU,MAAV,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,YAA/B,CAA4C,IAA5C,EAAkD,KAAlD,EAAyD,SAAzD,CAAH,EAAuE;AACtE,eAAW,IAAX,CADsE;AAEtE,UAFsE;IAAvE;GALD;;AAWA,SAAO,QAAP,CAjBsE;EAAzB;;;;;;;;;;AA7BnC,OAyDX,CAAO,EAAP,CAAU,MAAV,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,YAA/B,GAA8C,UAAS,KAAT,EAAgB,KAAhB,EAAuB,QAAvB,EAAgC;;AAE7E,MAAI,UAAU,KAAV,CAFyE;;AAI7E,MAAG,QAAH,EAAY;AACX,OAAG,MAAM,MAAN,KAAiB,MAAM,MAAN,EAAa;AAChC,cAAU,IAAV,CADgC;IAAjC;GADD,MAKI;AACH,OAAG,KAAC,CAAM,MAAN,KAAiB,MAAM,MAAN,IAAkB,MAAM,QAAN,KAAmB,MAAM,QAAN,EAAgB;AACzE,cAAU,IAAV,CADyE;IAA1E;GAND;;AAWA,SAAO,OAAP,CAf6E;EAAhC,CAzDnC;CAAX,CAAD,CA4EG,MA5EH","file":"map/jplist/services/path.js","sourcesContent":["/*global jQuery:false */\n(function($){\n\t'use strict';\t\t\n\t\n\t/** \n\t* Path Service\n\t* @type {Object} \n\t* @class Services for the path object (path inside dataitem, defined by data-path and data-type attributes within controls)\n\t* @memberOf jQuery.fn.jplist.services\n\t*/\n\tjQuery.fn.jplist.services.Path = {};\t\n\t\n\t/**\n\t* Path datatype enum\n\t* @enum {string}\n\t\n\tjQuery.fn.jplist.services.Path.DATA_TYPE = {\n\t\tTEXT: 'text'\n\t\t,NUMBER: 'number'\n\t\t,DATETIME: 'datetime'\n\t};\t\n\t*/\n\t\n\t/**\n\t* Is given path is in the given paths list (compare by jquery path only, data type is ignored)\n\t* @param {jQuery.fn.jplist.models.Path} path\n\t* @param {Array.<jQuery.fn.jplist.models.Path>} pathsList\n\t* @return {boolean}\n\t* @memberOf jQuery.fn.jplist.services.Path\n\t*/\n\tjQuery.fn.jplist.services.Path.isPathInList = function(path, pathsList){\n\t\n\t\tvar cpath\n\t\t\t,isInList = false\n\t\t\t,PATH_ONLY = true;\n\t\t\n\t\tfor(var i=0; i<pathsList.length; i++){\n\t\t\n\t\t\t//get path\n\t\t\tcpath = pathsList[i];\n\t\t\t\n\t\t\tif(jQuery.fn.jplist.services.Path.isPathsEqual(path, cpath, PATH_ONLY)){\n\t\t\t\tisInList = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn isInList;\n\t};\n\t\n\t/**\n\t* Is 2 paths are equal\n\t* @param {jQuery.fn.jplist.models.Path} path1\n\t* @param {jQuery.fn.jplist.models.Path} path2\n\t* @param {boolean} pathOnly - compare only by data-path\n\t* @return {boolean}\n\t* @memberOf jQuery.fn.jplist.services.Path\n\t*/\n\tjQuery.fn.jplist.services.Path.isPathsEqual = function(path1, path2, pathOnly){\n\t\n\t\tvar isEqual = false;\n\t\t\n\t\tif(pathOnly){\n\t\t\tif(path1.jqPath === path2.jqPath){\t\t\t\t\n\t\t\t\tisEqual = true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif((path1.jqPath === path2.jqPath) && (path1.dataType === path2.dataType)){\t\t\t\t\n\t\t\t\tisEqual = true;\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\treturn isEqual;\n\t};\n\t\n\t\n})(jQuery);\n\n"],"sourceRoot":"/source/"}