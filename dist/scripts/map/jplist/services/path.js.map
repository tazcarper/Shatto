{"version":3,"sources":["map/jplist/services/path.js"],"names":[],"mappings":"sCACA,CAAC,SAAS,CAAT,CAAW,CACX,a;;;;;GAQA,OAAO,EAAP,CAAU,MAAV,CAAiB,QAAjB,CAA0B,IAA1B,CAAiC,EAAjC,C;;;;;;;;;;;;;;;GAoBA,OAAO,EAAP,CAAU,MAAV,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,YAA/B,CAA8C,SAAS,IAAT,CAAe,SAAf,CAAyB,CAEtE,IAAI,KAAJ,CACE,SAAW,KADb,CAEE,UAAY,IAFd,CAIA,IAAI,IAAI,EAAE,CAAV,CAAa,EAAE,UAAU,MAAzB,CAAiC,GAAjC,CAAqC,C;AAGpC,MAAQ,UAAU,CAAV,CAAR,CAEA,GAAG,OAAO,EAAP,CAAU,MAAV,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,YAA/B,CAA4C,IAA5C,CAAkD,KAAlD,CAAyD,SAAzD,CAAH,CAAuE,CACtE,SAAW,IAAX,CACA,MACA,CACD,CAED,OAAO,QAAP,CACA,CAlBD,C;;;;;;;GA4BA,OAAO,EAAP,CAAU,MAAV,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,YAA/B,CAA8C,SAAS,KAAT,CAAgB,KAAhB,CAAuB,QAAvB,CAAgC,CAE7E,IAAI,QAAU,KAAd,CAEA,GAAG,QAAH,CAAY,CACX,GAAG,MAAM,MAAN,GAAiB,MAAM,MAA1B,CAAiC,CAChC,QAAU,IAAV,CACA,CACD,CAJD,KAKI,CACH,GAAI,MAAM,MAAN,GAAiB,MAAM,MAAxB,EAAoC,MAAM,QAAN,GAAmB,MAAM,QAAhE,CAA0E,CACzE,QAAU,IAAV,CACA,CACD,CAED,OAAO,OAAP,CACA,CAhBD,CAmBA,CA5ED,EA4EG,MA5EH","file":"map/jplist/services/path.js","sourcesContent":["/*global jQuery:false */\n(function($){\n\t'use strict';\t\t\n\t\n\t/** \n\t* Path Service\n\t* @type {Object} \n\t* @class Services for the path object (path inside dataitem, defined by data-path and data-type attributes within controls)\n\t* @memberOf jQuery.fn.jplist.services\n\t*/\n\tjQuery.fn.jplist.services.Path = {};\t\n\t\n\t/**\n\t* Path datatype enum\n\t* @enum {string}\n\t\n\tjQuery.fn.jplist.services.Path.DATA_TYPE = {\n\t\tTEXT: 'text'\n\t\t,NUMBER: 'number'\n\t\t,DATETIME: 'datetime'\n\t};\t\n\t*/\n\t\n\t/**\n\t* Is given path is in the given paths list (compare by jquery path only, data type is ignored)\n\t* @param {jQuery.fn.jplist.models.Path} path\n\t* @param {Array.<jQuery.fn.jplist.models.Path>} pathsList\n\t* @return {boolean}\n\t* @memberOf jQuery.fn.jplist.services.Path\n\t*/\n\tjQuery.fn.jplist.services.Path.isPathInList = function(path, pathsList){\n\t\n\t\tvar cpath\n\t\t\t,isInList = false\n\t\t\t,PATH_ONLY = true;\n\t\t\n\t\tfor(var i=0; i<pathsList.length; i++){\n\t\t\n\t\t\t//get path\n\t\t\tcpath = pathsList[i];\n\t\t\t\n\t\t\tif(jQuery.fn.jplist.services.Path.isPathsEqual(path, cpath, PATH_ONLY)){\n\t\t\t\tisInList = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn isInList;\n\t};\n\t\n\t/**\n\t* Is 2 paths are equal\n\t* @param {jQuery.fn.jplist.models.Path} path1\n\t* @param {jQuery.fn.jplist.models.Path} path2\n\t* @param {boolean} pathOnly - compare only by data-path\n\t* @return {boolean}\n\t* @memberOf jQuery.fn.jplist.services.Path\n\t*/\n\tjQuery.fn.jplist.services.Path.isPathsEqual = function(path1, path2, pathOnly){\n\t\n\t\tvar isEqual = false;\n\t\t\n\t\tif(pathOnly){\n\t\t\tif(path1.jqPath === path2.jqPath){\t\t\t\t\n\t\t\t\tisEqual = true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif((path1.jqPath === path2.jqPath) && (path1.dataType === path2.dataType)){\t\t\t\t\n\t\t\t\tisEqual = true;\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\treturn isEqual;\n\t};\n\t\n\t\n})(jQuery);\n\n"],"sourceRoot":"/source/"}